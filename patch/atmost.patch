commit 1079d4ce9b02a24ecb6ea107e5edc9e6bd0d267f
Author: Robert <robert@arctic.tw>
Date:   Sat Jun 3 18:27:09 2017 +0800

    Add receiveatmost.

diff --git a/src/ngx_http_lua_socket_tcp.c b/src/ngx_http_lua_socket_tcp.c
index 49811168..53f4a82d 100644
--- a/src/ngx_http_lua_socket_tcp.c
+++ b/src/ngx_http_lua_socket_tcp.c
@@ -23,7 +23,10 @@ static int ngx_http_lua_socket_tcp_connect(lua_State *L);
 #if (NGX_HTTP_SSL)
 static int ngx_http_lua_socket_tcp_sslhandshake(lua_State *L);
 #endif
+static int ngx_http_lua_socket_tcp_receive_common(lua_State *L,
+                                                  unsigned fulfill_partial);
 static int ngx_http_lua_socket_tcp_receive(lua_State *L);
+static int ngx_http_lua_socket_tcp_receiveatmost(lua_State *L);
 static int ngx_http_lua_socket_tcp_send(lua_State *L);
 static int ngx_http_lua_socket_tcp_close(lua_State *L);
 static int ngx_http_lua_socket_tcp_setoption(lua_State *L);
@@ -228,11 +231,14 @@ ngx_http_lua_inject_socket_tcp_api(ngx_log_t *log, lua_State *L)
 
     /* {{{req socket object metatable */
     lua_pushlightuserdata(L, &ngx_http_lua_req_socket_metatable_key);
-    lua_createtable(L, 0 /* narr */, 5 /* nrec */);
+    lua_createtable(L, 0 /* narr */, 6 /* nrec */);
 
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receive);
     lua_setfield(L, -2, "receive");
 
+    lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveatmost);
+    lua_setfield(L, -2, "receiveatmost");
+
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveuntil);
     lua_setfield(L, -2, "receiveuntil");
 
@@ -250,11 +256,14 @@ ngx_http_lua_inject_socket_tcp_api(ngx_log_t *log, lua_State *L)
 
     /* {{{raw req socket object metatable */
     lua_pushlightuserdata(L, &ngx_http_lua_raw_req_socket_metatable_key);
-    lua_createtable(L, 0 /* narr */, 6 /* nrec */);
+    lua_createtable(L, 0 /* narr */, 7 /* nrec */);
 
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receive);
     lua_setfield(L, -2, "receive");
 
+    lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveatmost);
+    lua_setfield(L, -2, "receiveatmost");
+
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveuntil);
     lua_setfield(L, -2, "receiveuntil");
 
@@ -275,7 +284,7 @@ ngx_http_lua_inject_socket_tcp_api(ngx_log_t *log, lua_State *L)
 
     /* {{{tcp object metatable */
     lua_pushlightuserdata(L, &ngx_http_lua_tcp_socket_metatable_key);
-    lua_createtable(L, 0 /* narr */, 12 /* nrec */);
+    lua_createtable(L, 0 /* narr */, 13 /* nrec */);
 
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_connect);
     lua_setfield(L, -2, "connect");
@@ -290,6 +299,9 @@ ngx_http_lua_inject_socket_tcp_api(ngx_log_t *log, lua_State *L)
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receive);
     lua_setfield(L, -2, "receive");
 
+    lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveatmost);
+    lua_setfield(L, -2, "receiveatmost");
+
     lua_pushcfunction(L, ngx_http_lua_socket_tcp_receiveuntil);
     lua_setfield(L, -2, "receiveuntil");
 
@@ -1708,8 +1720,22 @@ ngx_http_lua_socket_tcp_conn_retval_handler(ngx_http_request_t *r,
 
 
 static int
+ngx_http_lua_socket_tcp_receiveatmost(lua_State *L)
+{
+    return ngx_http_lua_socket_tcp_receive_common(L, 1);
+}
+
+
+static int
 ngx_http_lua_socket_tcp_receive(lua_State *L)
 {
+    return ngx_http_lua_socket_tcp_receive_common(L, 0);
+}
+
+
+static int
+ngx_http_lua_socket_tcp_receive_common(lua_State *L, unsigned fulfill_partial)
+{
     ngx_http_request_t                  *r;
     ngx_http_lua_socket_tcp_upstream_t  *u;
     ngx_int_t                            rc;
@@ -1758,6 +1784,8 @@ ngx_http_lua_socket_tcp_receive(lua_State *L)
         return 2;
     }
 
+    u->fulfill_partial = fulfill_partial;
+
     if (u->request != r) {
         return luaL_error(L, "bad request");
     }
@@ -2323,6 +2351,14 @@ success:
     }
 #endif
 
+    // Whether to fulfill a partial read.
+    dd("fulfill_partial=%d rest=%d length=%d", u->fulfill_partial, (int)u->rest,
+       (int)u->length);
+    if (u->fulfill_partial && u->rest < u->length) {
+        ngx_http_lua_socket_handle_read_success(r, u);
+        return NGX_OK;
+    }
+
     if (rev->active) {
         ngx_add_timer(rev, u->read_timeout);
 
diff --git a/src/ngx_http_lua_socket_tcp.h b/src/ngx_http_lua_socket_tcp.h
index dbdee41c..1b638a29 100644
--- a/src/ngx_http_lua_socket_tcp.h
+++ b/src/ngx_http_lua_socket_tcp.h
@@ -108,6 +108,7 @@ struct ngx_http_lua_socket_tcp_upstream_s {
     unsigned                         ssl_verify:1;
     unsigned                         ssl_session_reuse:1;
 #endif
+    unsigned                         fulfill_partial:1;
 };
 
 
